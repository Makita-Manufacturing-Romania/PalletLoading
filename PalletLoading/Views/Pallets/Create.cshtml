@model PalletLoading.ViewModels.AddContainerViewModel
@{
    ViewData["Title"] = "Create";
}


<link rel="stylesheet" href="~/css/background.css" />

<style>

    #loader-1 {
        display: none;
        left: 50%;
        position: relative;
    }

        #loader-1 #loader {
            position: absolute;
            height: 5vw;
            width: 5vw;
            border: 6px solid transparent;
            border-top-color: #3498db;
            border-bottom-color: #3498db;
            border-radius: 50%;
            z-index: 2;
            -webkit-animation: spin 2s linear infinite;
            -moz-animation: spin 2s linear infinite;
            -o-animation: spin 2s linear infinite;
            animation: spin 2s linear infinite;
        }

            #loader-1 #loader:before {
                content: "";
                position: absolute;
                top: 2%;
                bottom: 2%;
                left: 2%;
                right: 2%;
                border: 4px solid transparent;
                z-index: 2;
                border-top-color: #db213a;
                border-radius: 50%;
                -webkit-animation: spin 3s linear infinite;
                -moz-animation: spin 3s linear infinite;
                -o-animation: spin 3s linear infinite;
                animation: spin 3s linear infinite;
            }

            #loader-1 #loader:after {
                content: "";
                position: absolute;
                top: 5%;
                bottom: 5%;
                left: 5%;
                right: 5%;
                border: 3px solid transparent;
                border-top-color: #dec52d;
                z-index: 2;
                border-radius: 50%;
                -webkit-animation: spin 1.5s linear infinite;
                -moz-animation: spin 1.5s linear infinite;
                -o-animation: spin 1.5s linear infinite;
                animation: spin 1.5s linear infinite;
            }

    /*Keyframes for spin animation */

    @@-webkit-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(0deg); /* IE 9 */
            transform: rotate(0deg); /* Firefox 16+, IE 10+, Opera */
        }

        50% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(180deg); /* Firefox 16+, IE 10+, Opera */
        }

        100% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(360deg); /* Firefox 16+, IE 10+, Opera */
        }
    }


    @@-moz-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(0deg); /* IE 9 */
            transform: rotate(0deg); /* Firefox 16+, IE 10+, Opera */
        }

        50% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(180deg); /* Firefox 16+, IE 10+, Opera */
        }

        100% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(360deg); /* Firefox 16+, IE 10+, Opera */
        }
    }

    @@-o-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(0deg); /* IE 9 */
            transform: rotate(0deg); /* Firefox 16+, IE 10+, Opera */
        }

        50% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(180deg); /* Firefox 16+, IE 10+, Opera */
        }

        100% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(360deg); /* Firefox 16+, IE 10+, Opera */
        }
    }

    @@keyframes spin {
        0% {
            -webkit-transform: rotate(0deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(0deg); /* IE 9 */
            transform: rotate(0deg); /* Firefox 16+, IE 10+, Opera */
        }

        50% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(180deg); /* Firefox 16+, IE 10+, Opera */
        }

        100% {
            -webkit-transform: rotate(360deg); /* Chrome, Opera 15+, Safari 3.1+ */
            -ms-transform: rotate(360deg); /* IE 9 */
            transform: rotate(360deg); /* Firefox 16+, IE 10+, Opera */
        }
    }

    .btn-Ghost {
        color: #ffff;
        background-color: #ffffff !important;
    }


</style>


@{
    int ghostPalCnt = 0;
}



<h1 style="text-align:center;letter-spacing:1.5px;">Add pallets</h1>

@{
    var type = Model.Type;
    var lengthContainer = Model.Container.NoOfColumns;
    var widthContainer = Model.Container.NoOfRows;

    var totalLayer = lengthContainer * widthContainer;
    var palletsAux = Model.Pallets;

    var containerName = Model.Container.Name;
    var containerId = Model.Container.Id;
    var containerVolume = Model.Type.volume;
    decimal completedVolume = 0.000000M;
    var tempSumPcPalletVolume = Model.ModelImportDataPccPallets.Where(c => c.PartCenterPallets != null).Sum(c => c.PartCenterPallets.Volume);
    var tempSum = Model.ModelImportDataPccPallets.Where(c => c.pallet.PalletImportData != null).Sum(c => c.pallet.PalletImportData.volume * c.pallet.PalletImportData.picking_qty);
    var tempSumPcPalletVolumeHistory = Model.ModelImportDataPccPallets.Where(c => c.PartCenterPalletsHistory != null).Sum(c => c.PartCenterPalletsHistory.Volume);
    var tempSumHistory = Model.ModelImportDataPccPallets.Where(c => c.pallet.PalletImportDataHistory != null  ).Sum(c => c.pallet.PalletImportDataHistory.volume * c.pallet.PalletImportDataHistory.picking_qty);
    completedVolume = tempSumPcPalletVolume + tempSumPcPalletVolumeHistory + tempSumHistory + tempSum;

    string countryName = "default";
    if (Model.Container.Country != null)
        countryName = Model.Container.Country.Abbreviation;

}

<br />
<div class="mb-2 mr-2" style="float:right">
    <a class="btn btn-info" asp-action="Details" asp-controller="Containers2" asp-route-id="@Model.Container.Id" />Details</a>
</div>

<div class="container">
    <div class="col-lg-6" style="float:right;">
        <h5 style="text-align:right"> <span style="font-weight: bold; letter-spacing: 1.5px;">Max pallets per layer:</span> @totalLayer</h5>
    </div>
    <div class="col-lg-6">
        <h5>
            <span style="font-weight:bold; letter-spacing:1.5px;"> Client:</span>
            <span style="font-size:18px;">
                @{
                    string virgula = ", ";
                    foreach (var country in Model.ContainerAT)
                    {
                                            @country.Country.Name
                        if (country.Id != Model.ContainerAT.Last().Id)
                        {
                                                @virgula
                        }
                    }
                }
            </span>
        </h5>
        <h5>
            <span style="font-weight:bold; letter-spacing:1.5px;">
                Container:
            </span>   <span style="font-size:18px;">
                @{

                    foreach (var country in Model.ContainerAT)
                    {
                                            @country.ContainerName
                        if (country.Id != Model.ContainerAT.Last().Id)
                        {
                                                @virgula
                        }
                    }
                }
            </span>
        </h5>
        <a class="btn btn-info" asp-action="CountryList" asp-controller="Pallets" asp-route-id="@Model.Container.Id" style="margin-bottom:15px;" />Edit clients & containers </a>
        <h5> <span style="font-weight:bold; letter-spacing:1.5px;">Picked pallets:</span> @ViewData["pickedPallets"]</h5>
        <h5> <span style="font-weight:bold; letter-spacing:1.5px;">Volume:</span> <span id="volumOcupat">@(completedVolume.ToString("N2"))(m3) / @(containerVolume.ToString("N2"))(m3) (@((@completedVolume*100/@containerVolume).ToString("N2"))%) </span> </h5>

    </div>

    @*<div class="container">
        <div class="row">
        <div class="col-md-1">
        <h5 asp-for="Container.CountryId" class="control-label">Country</h5>

        </div>
        <div class="col-md-3">
        <select id="newCountry" asp-for="Container.CountryId" class="form-control" asp-items="ViewBag.CountryId"></select>

        </div>
        <div class="col-md-3">
        <select id="newCountry" asp-for="Container.CountryId" class="form-control" asp-items="ViewBag.CountryId"></select>

        </div>
        <div class="col-md-3">
        <input type="button" value="Add client" class="btn btn-success" id="addClient" />

        </div>
        </div>
        <div align="left">
        </div>
        </div>*@
</div>

<br />
@if (Model.idplp.Count != 0)
{
    <div class="row m-2">
        <div class="col-5" style="border:1px dashed silver; border-right:none;">
            @foreach (var tempItem in Model.idplp)
            {
                <div class="container" style="margin:0px;">
                    <h5>Country: <b>@tempItem.CustomerCode180P</b></h5>

                    <div class="row">
                        <div class="col-md-12">
                            <h5><b style="letter-spacing:1.5px;">Finished Product:</b> <span style="font-size:18px;"> <span id="l250-@tempItem.CustomerCode250P">@tempItem.LOADED250</span> (Loaded) / <span id="p250-@tempItem.CustomerCode250P">@tempItem.PICKED250</span> (Picked) </span></h5>
                            <h5><b style="letter-spacing:1.5px;">Spares:</b> <span style="font-size:18px;"><span id="l180-@tempItem.CustomerCode250P">@tempItem.LOADED180</span> (Loaded) / <span id="p180-@tempItem.CustomerCode250P">@tempItem.PICKED180</span> (Picked) </span></h5>
                        </div>

                    </div>
                </div>
                <br />

            }
        </div>
        <div class="col-2" style="display:flex; justify-content: center;align-items: center; border:1px dashed silver; border-left:none;">

            <input class="btn btn-primary btn-sm" value="Update" type="button" id="updateLPBtn" />

        </div>
    </div>

}

else
{
    <div class="container">
        <div class="row">
            <div class="col-md-5">

                <h5><b style="letter-spacing:1.5px;">Finished Product:</b> <span style="font-size:18px;"> <span id="l250">0</span> (Loaded) / <span id="p250">0</span> (Picked) </span></h5>
                <h5><b style="letter-spacing:1.5px;">Spares:</b> <span style="font-size:18px;"><span id="l180">0</span> (Loaded) / <span id="p180">0</span> (Picked) </span></h5>
            </div>
            <div class="col-md-1" style="display:flex; justify-content: center;align-items: center;">
                <input class="btn btn-primary btn-sm" value="Update" type="button" id="updateLPBtn" />
            </div>

        </div>
    </div>
}

@*@if(Model.Pallets.Any(x => x.Column <= 3))
    {
    var pallets = Model.Pallets.Where(x => x.Column <= 3).ToList();
    decimal palletsTotalMotrica = 0;

    var firstPallet = pallets.First();

    if (firstPallet.PalletImportData != null)
    palletsTotalMotrica = pallets.Sum(x => x.PalletImportData.weight);
    else
    palletsTotalMotrica = pallets.Sum(x => x.PalletImportDataHistory.weight);
    <h5>Motrica: @palletsTotalMotrica kg</h5>
    }*@

@*@{
    var motricaWeight = ViewBag.motricaWeight;

    if(motricaWeight != null)
    {
    <h5>@motricaWeight</h5>
    }
    }*@

<h5>Motrica: <span id="motrica">0</span> kg</h5>


<input type="hidden" value="@Model.Container.Id" id="container" />
<div class="dinamicTable">
    <table border="1" class="table-bordered" style="border:2px solid; border-right-style:dotted; width: 100%; height: 100%; text-align: center; align-content: center;">
        <tbody>
            @{
                var colNo = 1;
                var currentRow = 1;
                                @for (int row = 0; row < widthContainer; row++)
                {
                    var heightCustom = 100;
                                    <tr style="width:200px; height:@heightCustom.ToString()px; vertical-align: top">
                                        @for (int col = 0; col < lengthContainer; col++)
                        {
                            string idPallet = row.ToString() + "," + col.ToString();
                            var currentPallets = palletsAux.Where(x => x.Row == row && x.Column == col).OrderByDescending(x => x.OrderNo);

                            if (currentPallets != null)
                            {
                                                @*@if (currentPallets.Count() == 1)
                {*@
                                                <td ondrop="drop(event)" ondragover="allowDrop(event)" style="width:200px;position:relative; vertical-align: top;  padding-bottom:10px;">
                                                    @if (currentRow == 1)
                                    {
                                                        <p style="font-size:25px">@colNo</p>
                                        colNo++;
                                    }
                                    else
                                    {
                                                        <br />
                                    }
                                                    <input type="button" id="@idPallet" value="Add" style=" width:100%; height:@heightCustom.ToString()px;" class="addBtn btn-secondary">
                                                    @if (currentPallets.Count() == 0)
                                    {
                                                        <div style="height:@heightCustom.ToString()px;  "> </div>
                                    }
                                    else
                                    {
                                        foreach (var palet in currentPallets)
                                        {
                                            if (ghostPalCnt == 0)
                                            {
                                                                <div style="height:@heightCustom.ToString()px;  "> </div>
                                                ghostPalCnt = 1;
                                            }
                                                            <div style="height:@heightCustom.ToString()px;  "> </div>
                                        }
                                    }
                                                    <div style="position:absolute;bottom:0; margin-bottom:10px; width:98%; ">
                                                        @{
                                            var pallet = currentPallets.FirstOrDefault();


                                                                            @if (currentPallets.Count() == 0)
                                            {
                                                                                <input type="button" id="0" value="0" rowx="@row" columnx="@col" style="width:100%; height:@heightCustom.ToString()px;" class="btn-Ghost">
                                            }
                                            else
                                            {
                                                                @foreach (var palet in currentPallets)
                                                {
                                                    if (ghostPalCnt == 1)
                                                    {
                                                                        <input type="button" id="0" value="0" rowx="@palet.Row" columnx="@palet.Column" style="width:100%; height:@heightCustom.ToString()px;" class="btn-Ghost">
                                                        ghostPalCnt = 2;
                                                    }
                                                                    <input draggable="true" ondragstart="drag(event)" type="button" id="@palet.Id" value="@palet.OrderNo" rowx="@palet.Row" columnx="@palet.Column" style="width:100%; height:@heightCustom.ToString()px;" class="removeBtn btn-danger">
                                                }
                                                ghostPalCnt = 0;
                                            }
                                                        }
                                                        <br />
                                                    </div>

                                                </td>

                                                @*}
                else
                {
                <td ondrop="drop(event)" ondragover="allowDrop(event)" style="width:200px; padding-bottom:10px; height:@heightCustom.ToString()px;  vertical-align: top;">

                @if (currentRow == 1)
                {

                <p style="font-size:25px">@colNo</p>
                colNo++;
                }
                else
                {
                <br />
                }
                <input type="button" id="@idPallet" value="Add" style="width:100%; height:@heightCustom.ToString()px;" class="addBtn btn-secondary">
                @foreach (var palet in currentPallets)
                {
                <input draggable="true" ondragstart="drag(event)" type="button" id="@palet.Id" value="@palet.OrderNo" style="width:100%; height:@heightCustom.ToString()px;" class="removeBtn btn-danger">
                }
                </td>
                }*@
                                                @*<td style="width:200px; height:@heightCustom.ToString()px; text-align:center; table-layout:fixed; margin-top: 0;">
                <input type="button" id="@idPallet" value="Add" style="width:100%; height:@heightCustom-5.ToString()px; text-align:center" class="addBtn btn-secondary">
                @foreach (var palet in currentPallets)
                {
                <input type="button" id="@palet.Id" value="@palet.OrderNo" style="width:100%; height:@heightCustom-5.ToString()px; text-align:center" class="removeBtn btn-danger">
                }
                </td>*@
                            }
                            else
                            {
                                                <input type="button" id="@idPallet" value="Add" style=" width:100%; height:@heightCustom.ToString()px;" class="addBtn btn-secondary">
                            }



                                            @*                if (pallet != null)
                {
                <td style="width:200px; height:200px; text-align:center">
                <0form><input type="button" id="@idPallet" value="Add" text-align: center class="btn-secondary addBtn"></form>
                <br />
                <form><input type="button" id="@idPallet" value="@pallet.OrderNo" style="width:100%; height:100%; text-align:center" class="removeBtn btn-danger"></form>
                </td>
                }
                else
                {
                <td style="color: white; width: 200px; height: 200px; text-align:center">
                <form><input type="button" id="@idPallet" value="Add" style="width:100%; height:100%; text-align:center" class="addBtn btn-secondary"></form>
                </td>
                }

                palletsAux.Remove(pallet);*@
                        }
                                        @{
                            currentRow++;
                                        }
                                    </tr>
                }
            }
        </tbody>
    </table>

</div>
<br />

<div style="display:flex; justify-content:space-between">
    <div class="mb-2 mr-2">
        <input type="button" value="New row" class="btn btn-dark" id="newRow" />
        <input type="button" value="Remove row" class="btn btn-danger" id="removeRow" />
    </div>

    <div class="mb-2 mr-2">
        <input type="button" value="New column" class="btn btn-dark" id="newColumn" />
        <input type="button" value="Remove column" class="btn btn-danger" id="removeColumn" />
    </div>
</div>

<br />
<div style="width:100%" align="center">
    <form asp-action="Create" style="width:200px;">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <!--<div class="form-group">
            <label asp-for="Pallet.PalletType" class="control-label"></label>-->
        @*<select asp-for="PalletType" class="form-control" asp-items="ViewBag.PalletId" id="selectedType"></select>*@
        <!--<select asp-for="Pallet.PalletType" class="form-control" asp-items="ViewBag.PalletId"></select>
        </div>
        <div class="form-group" style="text-align:right">
            <input type="submit" value="Add" class="btn btn-success" />
        </div>-->
    </form>
</div>

<div style="width:100%; position:relative;">
    <div style="width: 100%; margin-top:-2.5vh; position:absolute;">
        <div class="loader-wrapper" id="loader-1">
            <div id="loader"></div>
        </div>
    </div>
</div>
<input type="button" value="Sync pallets" class="btn btn-dark" id="sincData" />

@if (Model.Container.CmrId == null)
{
    <input type="button" value="Generate CMR" class="btn btn-success" onclick="location.href='@Url.Action("Create","CMR", new { id = Model.Container.Id})'" />
}
else
{
    @*    <input type="button" value="Delete old CMR" class="btn btn-danger" onclick="location.href='@Url.Action("Delete","CMR", new { id = Model.Container.Id})'" />*@
    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#exampleModal">
        Delete old CMR
    </button>
}
<!-- Button trigger modal -->
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <h5 class="modal-title" id="exampleModalLabel">Do you want to delete your old CMR?</h5>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" onclick="location.href='@Url.Action("Delete","CMR", new { id = Model.Container.Id})'">Delete</button>
            </div>
        </div>
    </div>
</div>


<br />

<div id="tableSection">
    <table class='table' style='margin-top:25px;'>
        <tr><th>Order no</th><th>Container</th><th>Sales part</th><th>Pallet no</th><th>Serial from</th><th>Serial to</th><th>Quantity</th><th>Weight</th><th>Volume</th></tr>
        @foreach (var pallet in Model.ModelImportDataPccPallets.OrderBy(c => c.pallet.OrderNo))
        {
            if (pallet.pallet.PalletImportData != null)
            {
                <tr>
                    <td>@pallet.pallet.OrderNo</td>
                    <td>@pallet.pallet.PalletImportData.consignee_code - @pallet.pallet.PalletImportData.container_no </td>

                    <td>@pallet.pallet.PalletImportData.salse_part</td>
                    <td>@((int)pallet.pallet.PalletImportData.pallet_no)</td>
                    <td>@((int)pallet.pallet.PalletImportData.serial_from)</td>
                    <td>@((int)pallet.pallet.PalletImportData.serial_to)</td>

                    <td>@pallet.pallet.PalletImportData.picking_qty</td>
                    <td>@pallet.pallet.PalletImportData.weight</td>
                    @if (@pallet.pallet.PalletImportData.serial_from == 0)
                    {
                        @if (pallet.PartCenterPallets != null)
                        {
                            <td>@pallet.PartCenterPallets.Volume (m3)</td>
                        }
                        else
                        {
                            <td>0 (m3)</td>
                        }
                    }
                    else
                    {
                        <td>@((pallet.pallet.PalletImportData.volume * pallet.pallet.PalletImportData.picking_qty).ToString("N2")) (m3)</td>

                    }
                </tr>
            }
            else if (pallet.pallet.PalletImportDataHistory != null)
            {
                <tr>
                    <td>@pallet.pallet.OrderNo</td>
                    <td>@pallet.pallet.PalletImportDataHistory.consignee_code - @pallet.pallet.PalletImportDataHistory.container_no </td>

                    <td>@pallet.pallet.PalletImportDataHistory.salse_part</td>
                    <td>@((int)pallet.pallet.PalletImportDataHistory.pallet_no)</td>
                    <td>@((int)pallet.pallet.PalletImportDataHistory.serial_from)</td>
                    <td>@((int)pallet.pallet.PalletImportDataHistory.serial_to)</td>

                    <td>@pallet.pallet.PalletImportDataHistory.picking_qty</td>
                    <td>@pallet.pallet.PalletImportDataHistory.weight</td>
                    @if (@pallet.pallet.PalletImportDataHistory.serial_from == 0)
                    {
                        @if (pallet.PartCenterPalletsHistory != null)
                        {
                            <td>@pallet.PartCenterPalletsHistory.Volume.ToString("N2") (m3)</td>
                        }
                        else
                        {
                            <td>0 (m3)</td>
                        }
                    }
                    else
                    {
                        <td>@((pallet.pallet.PalletImportDataHistory.volume * pallet.pallet.PalletImportDataHistory.picking_qty).ToString("N2")) (m3)</td>

                    }
                </tr>
            }
        }

    </table>
</div>


<h3>Switches</h3>
<div id="content" class="html-content">
    @{

                            <table align="center" width="100%" id="switchTable">
                                @foreach (var ceva in Model.SwitchedPallets)
            {
                                    <tr>

                                        <td width="100%" align="center">
                                            @ceva.FirstPallet <->
                                                @ceva.SecondPallet
                                                <hr />
                                        </td>

                                    </tr>

            }
                            </table>
    }
</div>
@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("drag", ev.target.id);
    }

        function drop(ev) {
            ev.preventDefault();
            var draggedPallet = ev.dataTransfer.getData("drag");
            ev.target.appendChild(document.getElementById(draggedPallet));

            var idContainer = $('#container').val();
            var droppedPallet = ev.target.id;
            var droppedPalletValue = ev.target.value;
            var draggedPalletValue = $("#" + draggedPallet).val();

            var droppedPalletRow = ev.target.getAttribute('rowx');
            var droppedPalletColumn = ev.target.getAttribute('columnx');


            $("#switchTable").append('<tr><td width="100%" align="center">' +
                '' + droppedPalletValue + ' <-> ' + draggedPalletValue + '' +
                '<hr />' +
                '</td></tr>');
            if (droppedPalletRow != null && droppedPalletColumn != null) {
                if (droppedPallet == 0) {
                    $.ajax({
                        url: "/Pallets/ChangePosition",

                        data:
                        {
                            idContainer: idContainer, draggedPallet: draggedPallet, droppedPalletRow: droppedPalletRow, droppedPalletColumn: droppedPalletColumn
                        },

                        cache: false,
                        success: function (data) {
                            //alert('pallets moved');
                            location.reload(true);
                        },
                        error: function (data) {

                            alert('move fail');
                            location.reload(true);
                        }
                    });
                }
                else if (droppedPallet > 0) {
        @*var path = '@Url.Action("SwitchPallets")' + "?idContainer=" + idContainer + "&draggedPallet=" + draggedPallet + "&droppedPallet=" + droppedPallet;
                    window.location.href = path;*@

                        $.ajax({
                            url: "/Pallets/SwitchPallets",

                            data: {
                                idContainer: idContainer, draggedPallet: draggedPallet, droppedPallet: droppedPallet
                            },

                            cache: false,
                            success: function (data) {
                                //alert('pallets swapped');
                                //alert("why")
                                $(".dinamicTable").empty();
                                $(".dinamicTable").html(data);
                                //$(".newtable").empty();
                                //$(".newtable").html(data.secoundelement);
                                //empty 10,replace 18
                                //empty 18 put 10
                                //console.log(data)
                                location.reload(true);
                            },
                            error: function (data) {

                                alert('drag and drop fail');
                                console.log(data);
                                location.reload(true);
                            }
                        });
                }
            }
            else {
                location.reload(true);
            }


        }

     $(document).on('click', "#newRow",function () {
        var idContainer = $('#container').val();
        @*var path = '@Url.Action("AddRow")' + "?idContainer=" + idContainer;
                                window.location.href = path;*@


        $.ajax({
            url: "/Pallets/AddRow",

            data: {
                idContainer: idContainer
            },

            cache: false,
            success: function (data) {
                //alert("why")
                $(".dinamicTable").empty();
                $(".dinamicTable").html(data);
                //console.log(data)
                        location.reload(true);
            },
            error: function (data) {
                console.log(data);
            }
        });

    });

    $("#addClient").click(function () {
        var idContainer = $('#container').val();
        var idCountry = $('#newCountry').val();
        var path = '@Url.Action("AddCountry")' + "?container=" + idContainer + "&country=" + idCountry;
        window.location.href = path;
    });

        $("#updateLPBtn").click(function () {
            $("#updateLPBtn").attr("disabled", "true");
            var containerId = "@containerId";

            $.ajax({
                url: "/Pallets/GetLP",

                data: {
                    containerId: '' + containerId
                },

                cache: false,
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (data) {
                    $("#updateLPBtn").removeAttr("disabled");

                    for (var i = 0; i < data.importLP.length; i++) {
                        $("#l250-" + data.importLP[i].customerCode180P).text("" + data.importLP[i].loadeD250);
                        $("#l180-" + data.importLP[i].customerCode180P).text("" + data.importLP[i].loadeD180);
                        $("#p250-" + data.importLP[i].customerCode180P).text("" + data.importLP[i].pickeD250);
                        $("#p180-" + data.importLP[i].customerCode180P).text("" + data.importLP[i].pickeD180);
                    }
                    location.reload(true);
                }
            });
        });


    $("#sincData").click(function () {
        var idContainer = $('#container').val();
        var containerName = "@containerName";
        var countryName = "@countryName";
        var thisBtn = $(this);
        $("#loader-1").show()
        $(this).attr('disabled','true')

        $.ajax({
            url: "/Pallets/GetPallets",

            data: {
               containerId: idContainer
            },

            cache: false,
            contentType: "application/json;charset=UTF-8",
            dataType: "json",
            success: function (data) {
                var noPallets = data.listPallets.length;
                var tableTxt = "<table class='table' style='margin-top:25px;'><tr><th>Order no</th><th>Container</th><th>Sales part</th><th>Pallet no</th><th>Serial from</th><th>Serial to</th><th>Quantity</th><th>Weight</th><th>Volume</th></tr>"
                var motrica = data.motrica;
                var volumOcupat = data.volumOcupat;
                $("#motrica").text(motrica+"");
                $("#volumOcupat").text(volumOcupat +"(m3) / "+ @containerVolume.ToString("N2") +"(m3) (" + volumOcupat*@containerVolume.ToString("N2")/100 +"%)");

                for (var i = 0; i < noPallets; i++) {
                    var orderNo = data.listPallets[i].orderNoApp;
                    if (orderNo == -1) orderNo = "N/A"
                    /*console.log(data.listPallets[i].palletMapHistory)*/
                    if (data.listPallets[i].palletMapHistory == null) {
                       var test =  data.listPallets[i].palletMap.volume * data.listPallets[i].palletMap.picking_qty
                            if(data.listPallets[i].palletMap.serial_from == 0){
                                test =  data.listPallets[i].volumPcPallet;
                            }

                        tableTxt = tableTxt + "<tr><td>" + orderNo + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.consignee_code + " - " + data.listPallets[i].palletMap.container_no + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.salse_part + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.pallet_no + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.serial_from + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.serial_to + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.picking_qty + "</td>"
                            + "<td>" + data.listPallets[i].palletMap.weight + "</td>"
                            + "<td>" + Number.parseFloat(test).toFixed(2).replace(/\.0+$/,'')+ " (m3)</td></tr>"
                    } else {
                       var test = data.listPallets[i].palletMapHistory.volume *data.listPallets[i].palletMapHistory.picking_qty
                            console.log(data.listPallets[i])
                            if(data.listPallets[i].palletMapHistory.serial_from == 0){
                                test =  data.listPallets[i].volumPcPallet;
                            }
                       tableTxt = tableTxt + "<tr><td>" + orderNo + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.consignee_code + " - " + data.listPallets[i].palletMapHistory.container_no + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.salse_part + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.pallet_no + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.serial_from + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.serial_to + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.picking_qty + "</td>"
                           + "<td>" + data.listPallets[i].palletMapHistory.weight + "</td>"
                           + "<td>" + Number.parseFloat(test).toFixed(2).replace(/\.0+$/,'')+ " (m3)</td></tr>"
                    }

                }
                tableTxt = tableTxt + "</table>"
                $("#tableSection").empty();
                $("#tableSection").append(tableTxt);
                $("#loader-1").hide();
                $("#sincData").removeAttr("disabled");
            }
        });
    })

    $("#details").click(function () {
        var idContainer = $('#container').val();
        var path = '@Url.Action("Details","Containers2")' + "?id=" + idContainer;
        window.location.href = path;
    });

    $(document).on('click', "#removeRow", function () {
        var idContainer = $('#container').val();
        @*var path = '@Url.Action("RemoveRow")' + "?idContainer=" + idContainer;
                                window.location.href = path;*@


            var confirmation = confirm("Are you sure you want to remove this row?");
            if (confirmation == true) {
                $.ajax({
                    url: "/Pallets/RemoveRow",

                    data: {
                        idContainer: idContainer
                    },

                    cache: false,
                    success: function (data) {
                        //alert("why")
                        $(".dinamicTable").empty();
                        $(".dinamicTable").html(data);
                        //console.log(data)
                        location.reload(true);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }


    });

    $(document).on('click', "#newColumn",function () {
        var idContainer = $('#container').val();

        $.ajax({
            url: "/Pallets/AddColumn",

            data: {
                idContainer: idContainer
            },

            cache: false,
            success: function (data) {
                $(".dinamicTable").empty();
                $(".dinamicTable").html(data);

                    location.reload(true);
            },
            error: function (data) {
                console.log(data);
            }
        });

    });

    $(document).on('click', "#removeColumn",function () {
        var idContainer = $('#container').val();


            var confirmation = confirm("Are you sure you want to remove this column?");
            if (confirmation == true) {

                $.ajax({
                    url: "/Pallets/RemoveColumn",

                    data: {
                        idContainer: idContainer
                    },

                    cache: false,
                    success: function (data) {
                        $(".dinamicTable").empty();
                        $(".dinamicTable").html(data);

                        location.reload(true);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }

    });

    $(document).on('click', ".addBtn",function () {
        var position = this.id;
        var idContainer = $('#container').val();
        var palletName = $('#palletName').val();

        $.ajax({
            url: "/Pallets/AddPallet",

            data: {
                idContainer: idContainer, position: position, palletName: palletName
            },

            cache: false,
            success: function (data) {
                //alert("why")
                $(".dinamicTable").empty();
                $(".dinamicTable").html(data);
                //console.log(data)
                    location.reload(true);
            },
            error: function (data) {
                console.log(data);
            }
        });
    });

        $(document).on('click', ".removeBtn", function () {
            var palletId = this.id;
            var idContainer = $('#container').val();
        @*var path = '@Url.Action("RemovePallet")' + "?idContainer=" + idContainer + "&palletId=" + palletId;
            window.location.href = path;*@

            var confirmation = confirm("Are you sure you want to remove this pallet?");
            if (confirmation == true) {
                $.ajax({
                    url: "/Pallets/RemovePallet",
                    data: {
                        idContainer: idContainer, palletId: palletId
                    },
                    cache: false,
                    success: function (data) {
                        //alert("why")
                        $(".dinamicTable").empty();
                        $(".dinamicTable").html(data);
                        //console.log(data)
                        location.reload(true);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }
        });

</script>
}

@*<style>
    table {
    display: table;
    empty-cells: show;
    }

    table tr {
    display: table-cell;
    }

    table tr td {
    display: block;
    }
    </style>*@